version: '3.5'
services:
  app1: &app
    build: .
    hostname: app1
    environment:
      SERVER_PORT: 8080
      POSTGRES_URL: postgres://clo_user:clo_password@postgres:5432/clo_db
    expose:
      - "8080"
    depends_on:
      - postgres
    ulimits:
      nofile:
        soft: 1000000
        hard: 1000000
    deploy:
      resources:
        limits:
          cpus: '0.35'
          memory: '512MB'
  app2:
    <<: *app
    hostname: app2
    environment:
      SERVER_PORT: 8081
      POSTGRES_URL: postgres://clo_user:clo_password@postgres:5432/clo_db
    expose:
      - "8081"

  postgres:
    image: postgres:latest
    user: root
    environment:
      POSTGRES_HOST: localhost
      POSTGRES_DB: clo_db
      POSTGRES_USER: clo_user
      POSTGRES_PASSWORD: clo_password
    ports:
      - 5432:5432
    expose: 
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.9'
          memory: '0.5GB'
    volumes:
      - ./scripts/:/docker-entrypoint-initdb.d/
      - ./postgresql.conf:/etc/postgresql/postgresql.conf # Mapeie o arquivo de configuração
    command: postgres -c config_file=/etc/postgresql/postgresql.conf # Use o caminho correto no comando

  nginx: # Load Balancer
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app1
      - app2
    ports:
      - 9999:9999
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: '0.3GB'